<?phpnamespace app\api\controller;use app\common\controller\HomeBase;use app\common\model\CarAbnormalLog;use app\common\model\CarCommon;use app\common\model\CarOperationList;use app\common\model\CarOperationPer;use app\common\model\CarOperationSms;use app\common\model\CarRegulations;use app\common\model\Customer;use app\common\model\CustomerCash;use app\common\model\OrderActivity;use app\common\model\OrderCarPath;use app\common\model\Order;use app\common\model\OrderOperation;use app\common\model\Reserve;use app\common\model\Statistics;use app\common\model\Store;use app\common\model\StoreLeisure;use app\common\model\UserOld;use definition\CarStatus;use definition\GoodsType;use definition\OrderStatus;use OSS\OssClient;use think\Cache;use tool\ChargingDeviceTool;use tool\TableTool;use tool\WecharTool;/** * 用户登录注册接口 * Class Ueditor * @package app\api\controller */class Common extends HomeBase{    protected function _initialize()    {        parent::_initialize();    }    public function copy_table($data_int = "2018-08")    {        $table_tool_model = new TableTool();        $table_tool_model->copyTable($data_int, 0);    }    public function mytest()    {    }    public function test($s = '', $g = '')    {        $charging_device_tool = new ChargingDeviceTool();//    * @param $terminal_number 设备编号//    * @param int $gun_number 充电枪编号 （一个充电枪默认是0）//    * @param int $start_stop 01启动  02停止//    * @param $mobile_phone 电话号码//    * @param int $order_id 订单流水号//    * @param int $mode 充电模式 0.自动充电 1.金额模式 2.时间模式 3.电量模式//    * @param int $param 参数//    * @param int $money 余额        $terminal_number = 18071301;        $gun_number = $g;        if (empty($s) || intval($s) == 1) {            $start_stop = 1;        } else {            $start_stop = 2;        }        $mobile_phone = "18785160987";        $order_id = 10;        $mode = 0;        $param = 0;        $money = 100;        $out_data = $charging_device_tool->switchCharging($terminal_number, $gun_number, $start_stop, $mobile_phone, $mode, $order_id, $param, $money);        print_r($out_data);//        $customer_model = new Customer();//       $out_data =  $customer_model->checkPersonalFace('659');//       print_r($out_data);        //        $balance = array(//            'balance' => 1000,// 单位 元//            'customer_id' => 63,//用户id//            'remark' => "后台管理员充值"//备注信息//        );//        $customer_model = new Customer();//        if ($customer_model->addBalance($balance)) {//            echo "添加成功";//        }//        $customer_balance = OpensslAES::decryptWithOpenssl("OCHknWHoeuEFoQIDHB/Bfw==");//        echo  $customer_balance;//        $carDeviceTool = new CarDeviceTool();//        $keyword = "T";//        $page_config = ['page' => 1, 'query' => ['keyword' => $keyword]];//        $carDeviceTool->getPageList($keyword, 'DESC', $page_config, 8);//        $channel_condition = Config::get('ChannelCondition');//        $channel_type = $channel_condition[1];//        $customer_coupon_model = new CustomerCoupon();//        $in_coupon = [//            'customer_id' => 17,//            'coupon_code' => CouponCode::$CouponCodeActivity['code'],//            'coupon_type' => 30,//            'remark' => $channel_type['register']['info'],//            'explain' => $channel_type['register']['explain'],//            'end_time' => 3600 * 24 * 30//        ];//        $ret = $customer_coupon_model->add_coupon($in_coupon);//        if($ret){//            echo  "获取成功";//        }else{//            echo  "获取失败";//        }//        $image = file_get_contents('test5.jpg');//        $image = base64_encode($image);//        $name ="杨可";//        $idcard ="522101199606260824";//        $out_data = ChinaDataApi::personal_face($name,$idcard,$image);//        print_r($out_data);    }    public function test1($s = '')    {        $charging_device_tool = new ChargingDeviceTool();        $terminal_number = 18071301;//        $out_data = $charging_device_tool->switchCharging($terminal_number, $gun_number, $start_stop, $mobile_phone, $mode, $order_id, $param, $money);        $out_data = $charging_device_tool->getCharging($terminal_number);        print_r($out_data);    }    public function test2()    {        $charging_device_tool = new ChargingDeviceTool();        $terminal_number = 18071301;//        $out_data = $charging_device_tool->switchCharging($terminal_number, $gun_number, $start_stop, $mobile_phone, $mode, $order_id, $param, $money);        $out_data = $charging_device_tool->setCharging($terminal_number);        print_r($out_data);    }    /**     * 未提交订单基本信息     * 输入方式 POST     * 输入参数     * goods_id 商品id     * goods_type 商品类型     * acquire_store_id 取车门店id     * acquire_time 取车时间     * return_store_id 还车门店id     * return_time 还车时间     */    public function calc_order_info()    {        $dataout = array(            'code' => 1,            'info' => '参数有误',        );        if ($this->request->isPost()) {            $data = $this->request->only(['goods_id', 'goods_type', 'acquire_time', 'acquire_address', 'return_time', 'return_address', 'acquire_store_id', 'return_store_id']);            if (empty($data['goods_type'])) {                $goods_type = GoodsType::$GoodsTypeCar['code'];            } else {                $goods_type = $data['goods_type'];            }            $goods_id = $data['goods_id'];            $acquire_time = strtotime($data['acquire_time']);            $return_time = strtotime($data['return_time']);            $acquire_store_id = $data['acquire_store_id'];            $return_store_id = $data['return_store_id'];            $store_model = new Store();            $acquire_store = $store_model->getStore($acquire_store_id);            $return_store = $store_model->getStore($return_store_id);            $goods_info_detail = array(                'car_data' => '',                'acquire_store' => $acquire_store['data'],                'return_store' => $return_store['data'],                'goods_amount' => '',                'goods_basic' => '',                'goods_procedure' => '',                'goods_remote' => '',//异地换费用                'goods_all' => '',            );            switch ($goods_type) {                //普通汽车                case GoodsType::$GoodsTypeCar['code']:                    if (($return_time - $acquire_time) < 1800) {                        $dataout['code'] = 2;                        $dataout['info'] = '使用时间必须大于30分钟';                        out_json_data($dataout);                    }                    $car_common_model = new CarCommon();                    $out_goods = $car_common_model->getCarCommon($goods_id, true);                    if (intval($out_goods['code']) == 0) {                        $goods_info = $out_goods['data'];                        $goods_info_detail['car_data'] = $goods_info;                        if (is_time_interval($goods_info['reserve_interval'], $acquire_time, $return_time)) {                            $out_error = array(                                'code' => 99,                                'info' => '时间区间已被订购，请刷新车辆列表',                            );                            out_json_data($out_error);                        }                        $goods_sum = get_acquire_return($acquire_time, $return_time);                        $rests_cost_data = rests_cost_calc($data);                        $order_amount = $goods_sum * floatval($goods_info['day_price']) + $rests_cost_data['rests_cost'];//租金+还车费用                        $order_amount = $order_amount + $goods_sum * floatval($goods_info['day_basic']) + floatval($goods_info['day_procedure']);//基本服务费用+车行费用                        //商品费用明细                        $goods_info_detail['goods_amount'] = floatval($goods_info['day_price']) . "×" . $goods_sum;                        $goods_info_detail['goods_basic'] = floatval($goods_info['day_basic']) . "×" . $goods_sum;                        $goods_info_detail['goods_procedure'] = floatval($goods_info['day_procedure']);                        $goods_info_detail['goods_remote'] = floatval($rests_cost_data['rests_cost']);                        $goods_info_detail['goods_all'] = $order_amount;                        $goods_info_detail['goods_sum'] = $goods_sum;                    } else {                        out_json_data($out_goods);                    }                    break;                //电动车                case GoodsType::$GoodsTypeElectrocar['code']:                    $car_common_model = new CarCommon();                    $out_goods = $car_common_model->getCarCommon($goods_id, true);                    if (intval($out_goods['code']) == 0) {                        $goods_info = $out_goods['data'];                        $goods_info_detail['car_data'] = $goods_info;                        if ($goods_info['car_status'] != CarStatus::$CarStatusNormal['code']) {                            $out_error = array(                                'code' => 99,                                'info' => '此车暂时不能被租用',                            );                            out_json_data($out_error);                        }                        $goods_sum = 0;                        $order_amount = 0;                        $rests_cost_data = rests_cost_calc($data);                        $goods_info_detail['goods_amount'] = floatval($goods_info['day_price']) . "×" . $goods_sum;                        $goods_info_detail['goods_basic'] = floatval($goods_info['day_basic']) . "×" . $goods_sum;                        $goods_info_detail['goods_procedure'] = floatval($goods_info['day_procedure']);                        $goods_info_detail['goods_remote'] = floatval($rests_cost_data['rests_cost']);                        $goods_info_detail['goods_all'] = $order_amount;                        $goods_info_detail['goods_sum'] = $goods_sum;                    } else {                        out_json_data($out_goods);                    }                    break;                //充电桩                case GoodsType::$GoodsTypeCharging['code']:                    break;                default:                    $out_goods['code'] = 5;                    $out_goods['info'] = "商品类型未定义";                    out_json_data($out_goods);            }            $dataout['code'] = 0;            $dataout['data'] = $goods_info_detail;            $dataout['info'] = '获取成功';        }        out_json_data($dataout);    }    /**     * 通过店铺id 获取店铺信息     * @param $id     */    public function get_store_id($id)    {        $dataout = array(            'code' => 1,            'info' => '参数有误',        );        if (empty($id)) {            out_json_data($dataout);        }        $store_model = new Store();        $acquire_store = $store_model->getStore($id);        $dataout['code'] = 0;        $dataout['data'] = $acquire_store;        $dataout['info'] = '获取成功';        out_json_data($dataout);    }    /**     * 获取车牌号     * @param string $serverId 微信上传图片id     * @param string $url 图片实际地址     */    public function license_plate($serverId = '', $url = '')    {        if (empty($url)) {            $image_data = get_img_url($serverId, '', '', true);            $image = $image_data['data'];            $data = license_plate('', $image);        } else {            $data = license_plate($url, '');        }        out_json_data($data);    }    /**************************自动退换接口**************************/    public function return_cash()    {        $page = 1;        $cash_model = new CustomerCash();        $cash_log = [];        while (true) {            //$map = array(), $order = '', $config_page, $limit = 8            $map['state'] = 20;            $map['auto'] = 0;            $config_page = ['page' => $page];            $cash_list = $cash_model->getPagelist($map, '', $config_page, 20, true);            if (count($cash_list) == 0) {                file_put_contents("public/log/" . date("YmdHsi") . '_cash_log.txt', json_encode($cash_log));                $out_data = [                    'code' => 0,                    'info' => "执行完成"                ];                out_json_data($out_data);            }            foreach ($cash_list as $value) {                $url = "http://www.youchedongli.cn" . url('/api/Pay/wxpayRefund/pay_sn/' . $value['pay_sn']);                $out_json = file_get_contents($url);                $cash_log[] = [                    'pay_sn' => $value['pay_sn'],                    'data' => json_decode($out_json, true)                ];            }            $page++;        }        $out_data = [            'code' => 0,            'info' => "执行完成"        ];        out_json_data($out_data);    }    /**     * 获取车辆列表     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function car_list()    {        $car_common_model = new CarCommon();        $car_list = $car_common_model->where([])->field('licence_plate,device_number,car_color,car_status')->select();        $car_list_arr = [];        foreach ($car_list as &$value) {            if (intval($value['car_status']) >= 4) {                $value['car_status'] = 0;            } else {                $value['car_status'] = 1;            }            $car_list_arr[] = [                'deviceId' => $value['device_number'],                'licensePlateNumber' => $value['licence_plate'],                'vehicleColor' => $value['car_color'],                'operatingState' => $value['car_status'],            ];        }        out_json_data($car_list_arr);    }    public function car_operation()    {        $car_operation_sms_model = new CarOperationSms();        $car_operation_sms_model->analyzeOperation(153, 0);    }    /**     * 异常车辆刷新     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function car_abnormal()    {        $car_abnormal_log_model = new CarAbnormalLog();        $car_abnormal_log_model->getAbnormalList(153, 0, 0);        $car_operation_list_model = new CarOperationList();        $car_operation_list_model->getOperationPerList(153, 0, 0);        $carcommon_model = new CarCommon();        $carcommon_model->getUnusualCar(153, 90, 0, false);        $out_data = [            'code' => 0,            'info' => "成功"        ];        file_put_contents("public/car/abnormal_" . date("Y_m_d_H_i_s") . ".text", "执行成功");        out_json_data($out_data);    }    /**     * 通知未未实名制的用户     */    public function customer_sms()    {        $customer_model = new Customer();        $last_time = (date("Y-m-d", strtotime("-1 day"))) . " 21:00:00";        $now_time = date("Y-m-d H:i:s");        $customer_list = $customer_model->where(['customer_status' => 0, 'mobile_phone' => ['neq', ''], 'create_time' => [['egt', $last_time], ['elt', $now_time]]])->field('mobile_phone')->select();        $out_data = [            'code' => 0,            'info' => "成功"        ];        foreach ($customer_list as $value) {            $out_data = send_customer_sms($value['mobile_phone']);        }        out_json_data($out_data);    }    /**     * 发送用户通知     * @param int $page     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function customer_sms_message($page = -1, $key = '')    {        $out_data = [            'code' => 1000,            'info' => "参数有误"        ];        if ($key != "ycdl2018YCDL") {            out_json_data($out_data);        }        if (intval($page) == -1) {            $page = Cache::get('customer_sms_message_page');            if (empty($page)) {                $page = 0;            } else if (intval($page) == -2) {                $out_data = [                    'code' => 20,                    'info' => "已结束"                ];                out_json_data($out_data);            }        }        $customer_model = new UserOld();        $customer_list = $customer_model->where([])->order("id ASC")->field('mobile_phone')->limit($page * 150, 150)->select();        $out_data = [            'code' => 0,            'info' => "成功"        ];        $sum = 0;        foreach ($customer_list as $value) {            $out_data = send_customer_sms_message($value['mobile_phone']);            $sum++;        }        if ($sum == 0) {            Cache::set('customer_sms_message_page', -2);            $out_data['page'] = -2;            file_put_contents("page.txt", -2);        } else {            Cache::set('customer_sms_message_page', intval($page) + 1);            $out_data['page'] = intval($page) + 1;            file_put_contents("page.txt", intval($page) + 1);        }        out_json_data($out_data);    }    /**     * 使用中的订单     * @param string $key     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function use_order($key = "")    {        $out_data = [            'code' => 1000,            'info' => "参数有误"        ];        if ($key != "ycdl2018YCDL") {            out_json_data($out_data);        }        $order_model = new Order();        $customer_model = new Customer();        $map = [            'order_status' => OrderStatus::$OrderStatusAcquire['code'],            'goods_type' => GoodsType::$GoodsTypeElectrocar['code']        ];        $order_use_list = $order_model->getList($map, 'id ASC', 0, 0, true, '');        foreach ($order_use_list as $value) {            $customer_data = $customer_model->getCustomerField($value['customer_id'], 'customer_balance');            $fee = floatval($customer_data['customer_balance']) - (floatval($value['order_amount']) - floatval($value['pd_amount']));            if ($fee > 100) {                $send_data = [                    'licence_plate' => $value['goods_licence_plate'],                    'km' => $value['all_mileage'],                    'phone' => "085188628700",                ];                send_use_order_sms($value['mobile_phone'], $send_data);                send_use_order_sms("13078580626", $send_data);                send_use_order_sms("18785160986", $send_data);            }        }        $out_data['code'] = 0;        $out_data['info'] = "发送成功";        out_json_data($out_data);    }    /**     * 刷新路径     * @param int $page     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function update_order($page = -1)    {//        $order_path_model = new OrderCarPath();//        if (empty($page)) {//            $page = 0;//        }//        $limit = 100;//        $order_list = $order_path_model->where([])->limit($page * $limit, $limit)->select();//        $car_model = new CarDeviceTool();//        foreach ($order_list as $value) {//            $path = [];//            $out_path = $car_model->getDeviceLog($value['device_number'], $value['start_time'], $value['end_time']);//            if (empty($out_path['code'])) {//                $path = $out_path['data'];//            }//            $start_time = date("Y-m", strtotime($value['start_time']));//            $order_path_model->where(['order_id' => $value['order_id']])->setField(['path' => serialize($path), 'month' => $start_time]);//        }//        if (intval($page) == -1) {//            $page = Cache::get('update_order_page');//            if (empty($page)) {//                $page = 0;//            } else if (intval($page) == -2) {//                $out_data = [//                    'code' => 20,//                    'info' => "已结束"//                ];//                out_json_data($out_data);//            }//        }//        $order_model = new Order();//        $limit = 500;//        $order_list = $order_model->where(['order_status' => ['gt', 20]])->field('id,acquire_date')->order('id ASC')->limit($page * $limit, $limit)->select();//        $sum = 0;//        foreach ($order_list as $value) {//            $up_week = date("Y-W", strtotime($value['acquire_date'] . " 00:00:00"));//            $order_model->where(['id' => $value['id']])->setField(['acquire_year_week' => $up_week]);//            $sum++;//        }//        if ($sum == 0) {//            Cache::set('update_order_page', -2);//            Cache::set('update_order_page', intval($page) + 1);//            $out_data['order_page'] = -2;//            file_put_contents("order_page.txt", -2);//        } else {//            Cache::set('update_order_page', intval($page) + 1);//            $out_data['page'] = intval($page) + 1;//        }//        $out_data['code'] = 0;//        out_json_data($out_data);//        Cache::set('update_order_page',0);        if (intval($page) == -1) {            $page = Cache::get('update_order_page');            if (empty($page)) {                $page = 0;            } else if (intval($page) == -2) {                $out_data = [                    'code' => 20,                    'info' => "已结束"                ];                out_json_data($out_data);            }        }        $order_model = new StoreLeisure();        $limit = 500;        $order_list = $order_model->where(['status' => 1])->field('id,create_time,end_time')->order('id ASC')->limit($page * $limit, $limit)->select();        $sum = 0;        foreach ($order_list as $value) {//            $up_create_week = date("Y-W", $value['create_time']);//            $up_end_week = date("Y-W", $value['end_time']);            $up_end_m = date("Y-m", $value['end_time']);            $order_model->where(['id' => $value['id']])->setField(['date_e_month' => $up_end_m]);            $sum++;        }        if ($sum == 0) {            Cache::set('update_order_page', -2);            Cache::set('update_order_page', intval($page) + 1);            $out_data['order_page'] = -2;            file_put_contents("order_page.txt", -2);        } else {            Cache::set('update_order_page', intval($page) + 1);            $out_data['page'] = intval($page) + 1;        }        $out_data['code'] = 0;        out_json_data($out_data);    }    /**--------------------还车任务处理-----------------------*/    /**     * 还车回调     * @param $customer_id     * @param $order_id     * @param $device_id     * @param $start_time     * @param $end_time     * @param $key     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function order_return($customer_id = '', $order_id = '', $device_id = '', $start_time = '', $end_time = '', $key = "")    {//        file_put_contents("order_return.txt", $customer_id . "|" . $order_id . "|" . $device_id . "|" . $start_time . "|" . $end_time);        if ($key == "ycdlreturn2018") {            $order_activity_model = new OrderActivity();            $order_activity_model->addActivity($customer_id);            $order_car_path_model = new OrderCarPath();            $out_data = $order_car_path_model->addPath($order_id, $device_id, $start_time, $end_time);            out_json_data($out_data);        }        $out_data = [            'code' => 100,            'info' => "执行失败"        ];        out_json_data($out_data);    }    /**--------------------还车任务处理结束-----------------------*/    /**     * @param string $key     */    /**     * @param string $key     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function order_operation_return($key = "")    {        $out_data = [            'code' => 1000,            'info' => "参数有误"        ];        if ($key != "ycdl2018YCDL") {            out_json_data($out_data);        }        $order_operation_model = new OrderOperation();        $map = [            'order_status' => ['between', OrderStatus::$OrderStatusNopayment['code'] . "," . OrderStatus::$OrderStatusReturn['code']]        ];        $order_operation_list = $order_operation_model->getList($map, 'id ASC', 0, 0, true, 0);        foreach ($order_operation_list as $value) {            $order_img = [0 => "http://img.youchedongli.cn/public/static/mobile/images/car_pic_left_front.png", 1 => "http://img.youchedongli.cn/public/static/mobile/images/car_pic_right_front.png", 2 => "http://img.youchedongli.cn/public/static/mobile/images/car_pic_back.png"];            $operation_data = [                'id' => $value['id'],                'return_store_id' => $value['store_site_id'],                'return_img' => $order_img,                'order_type' => $value['order_type'],                'car_status' => $value['car_status'],                'notes' => $value['notes']            ];            $out_data = $order_operation_model->submitOrderOperationFail($value['operation_id'], $operation_data);        }        file_put_contents('public/log/'.date("Ymd").".txt",json_encode($out_data));        out_json_data($out_data);    }    /**--------------------统计数据采集处理-----------------------*/    public function update_statistics($time = '')    {//        Cache::set('update_statistics_time', 0);        if (empty($time)) {            $time = strtotime("-1 day");        }//        if (intval($time) == 100) {//            $out_data = [//                'code' => 100,//                'info' => "结束",//            ];//            out_json_data($out_data);//        }        $day = date("Y-m-d", $time);        $this->statistics_data($day, 1, 1);        $this->statistics_data($day, 2, 1);        $this->statistics_data($day, 3, 1);        $w_s = date("W", $time);        $w_e = date("W", $time + 3600 * 24);        if ($w_e != $w_s) {            $this->statistics_data($day, 1, 2);            $this->statistics_data($day, 2, 2);            $this->statistics_data($day, 3, 2);        }        $m_s = date("m", $time);        $m_e = date("m", $time + 3600 * 24);        if ($m_e != $m_s) {            $this->statistics_data($day, 1, 3);            $this->statistics_data($day, 2, 3);            $this->statistics_data($day, 3, 3);        }//        $time = $time + 3600 * 24;//        if ($time >= strtotime(date("Y-m-d"))) {//            Cache::set('update_statistics_time', 100);//        } else {//            Cache::set('update_statistics_time', $time);//        }        $out_data = [            'code' => 0,            'day' => date("Y-m-d", $time),            'info' => "完成",        ];        out_json_data($out_data);    }    /**     * @param string $day     * @param int $type     * 1订单运营情况 2取车情况 3还车情况 4空站情况     * @param int $d_type     * 1日统计 2周统计 3月统计     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function statistics_data($day = '', $type = 1, $d_type = 1)    {        $return_data = [            'code' => 100,            'info' => "参数有误"        ];        if (empty($type) || empty($d_type)) {            return $return_data;        }        if (empty($day)) {            $ymd = time() - 3600 * 24;        } else {            $ymd = strtotime($day);        }        switch ($type) {            case 1:                $operation_per_model = new CarOperationPer();                $operation_per_list = $operation_per_model->getOperationPerList(153);                $operation_per_arr = [];                foreach ($operation_per_list['data'] as $value) {                    $operation_per_arr[] = $value['phone'];                }                $days = 1;                $map = [                    'order_status' => ['egt', OrderStatus::$OrderStatusReturn['code']]                ];                switch ($d_type) {                    case 1:                        $map['acquire_date'] = date("Y-m-d", $ymd);                        $days = 1;                        break;                    case 2:                        $map['acquire_year_week'] = date("Y", $ymd) . "-" . (intval(date("W", $ymd)) - 1);                        $days = 7;                        break;                    case 3:                        $map['acquire_month'] = date("Y-m", $ymd);                        $days = 30;                        break;                }                $order_model = new Order();                $order_list = $order_model->getList($map, 'id ASC', 0, $limit = 0, false, 153);                $order_amount = 0;                $coupon_amount = 0;                $first_sub_money = 0;                $sum_order = 0;                foreach ($order_list as $value) {                    if (!in_array($value['customer_phone'], $operation_per_arr)) {                        $order_amount += floatval($value['order_amount']);                        $coupon_amount += floatval($value['coupon_amount']);                        $first_sub_money += floatval($value['first_sub_money']);                        $sum_order++;                    }                }                $sum_order_average = 0;                if ($sum_order > 0) {                    $sum_order_average = round(($order_amount - $coupon_amount - $first_sub_money) / $sum_order, 2);                }                $order_data = [                    'order_amount' => $order_amount,                    'sum_order' => $sum_order,                    'sum_order_average' => $sum_order_average,                    'coupon_amount' => $coupon_amount,                    'first_sub_money' => $first_sub_money,                    'income' => round($order_amount - $coupon_amount - $first_sub_money, 2),                ];                $car_model = new CarCommon();                $car_all = $car_model->where(['goods_type' => GoodsType::$GoodsTypeElectrocar['code']])->count();                $car_sum = $car_model->where(['goods_type' => GoodsType::$GoodsTypeElectrocar['code'], 'car_status' => ['egt', CarStatus::$CarStatusNormal['code']]])->count();                $car_data = [                    'day_all' => $car_all,                    'day_sum' => $car_sum,                    'money' => round(($order_amount / $car_sum), 2),                    'day_money' => round(($order_amount / $car_sum) / $days, 2),                    'order_car' => round($sum_order / $car_sum, 2),                ];                $data_log = [                    'order_data' => $order_data,                    'car_data' => $car_data                ];                $statistics_model = new Statistics();//            * data_log 统计的数据//            * year 统计年//            * month 统计年-月//            * week 统计年-月-周//            * day 统计年-月-日//            * hour 统计小时//            * type 统计类型 1订单运营情况 2取车情况 3还车情况 4空站情况//            * d_type 统计类型 1日统计 2周统计 3月统计 4年统计//            * store_key_id 数据归属                $in_data = [                    'data_log' => $data_log,                    'year' => date("Y", $ymd),                    'month' => date("Y-m", $ymd),                    'week' => date("Y-W", $ymd),                    'day' => date("Y-m-d", $ymd),                    'type' => $type,                    'd_type' => $d_type,                    'store_key_id' => 153                ];                $return_data = $statistics_model->addStatistics($in_data);                return $return_data;                break;            case 2:                $map = [                    'order_status' => ['egt', OrderStatus::$OrderStatusReturn['code']]                ];                switch ($d_type) {                    case 1:                        $map['return_date'] = date("Y-m-d", $ymd);                        break;                    case 2:                        $map['acquire_year_week'] = date("Y", $ymd) . "-" . (intval(date("W", $ymd)) - 1);                        break;                    case 3:                        $map['return_month'] = date("Y-m", $ymd);                        break;                }                $order_model = new Order();                $acquire_data_temp = $order_model->where($map)->field('acquire_store_id,acquire_store_name,count(id) count')->group('acquire_store_id')->select();                $acquire_data_temp = json_encode($acquire_data_temp);                $acquire_data_temp = json_decode($acquire_data_temp, true);                $acquire_data_temp = two_sort($acquire_data_temp, 'count', SORT_DESC);                $data_log = [                    'acquire_data' => $acquire_data_temp,                ];                $statistics_model = new Statistics();//            * data_log 统计的数据//            * year 统计年//            * month 统计年-月//            * week 统计年-月-周//            * day 统计年-月-日//            * hour 统计小时//            * type 统计类型 1订单运营情况 2取车情况 3还车情况 4空站情况//            * d_type 统计类型 1日统计 2周统计 3月统计 4年统计//            * store_key_id 数据归属                $in_data = [                    'data_log' => $data_log,                    'year' => date("Y", $ymd),                    'month' => date("Y-m", $ymd),                    'week' => date("Y-W", $ymd),                    'day' => date("Y-m-d", $ymd),                    'type' => $type,                    'd_type' => $d_type,                    'store_key_id' => 153                ];                $return_data = $statistics_model->addStatistics($in_data);                return $return_data;                break;            case 3:                $map = [                    'order_status' => ['egt', OrderStatus::$OrderStatusReturn['code']]                ];                switch ($d_type) {                    case 1:                        $map['return_date'] = date("Y-m-d", $ymd);                        break;                    case 2:                        $map['return_year_week'] = date("Y", $ymd) . "-" . (intval(date("W", $ymd)) - 1);                        break;                    case 3:                        $map['return_month'] = date("Y-m", $ymd);                        break;                }                $order_model = new Order();                $return_data_temp = $order_model->where($map)->field('return_store_id,return_store_name,count(id) count')->group('return_store_id')->select();                $return_data_temp = json_encode($return_data_temp);                $return_data_temp = json_decode($return_data_temp, true);                $return_data_temp = two_sort($return_data_temp, 'count', SORT_DESC);                $data_log = [                    'return_data' => $return_data_temp,                ];                $statistics_model = new Statistics();//            * data_log 统计的数据//            * year 统计年//            * month 统计年-月//            * week 统计年-月-周//            * day 统计年-月-日//            * hour 统计小时//            * type 统计类型 1订单运营情况 2取车情况 3还车情况 4空站情况//            * d_type 统计类型 1日统计 2周统计 3月统计 4年统计//            * store_key_id 数据归属                $in_data = [                    'data_log' => $data_log,                    'year' => date("Y", $ymd),                    'month' => date("Y-m", $ymd),                    'week' => date("Y-W", $ymd),                    'day' => date("Y-m-d", $ymd),                    'type' => $type,                    'd_type' => $d_type,                    'store_key_id' => 153                ];                $return_data = $statistics_model->addStatistics($in_data);                return $return_data;                break;            case 4:                $store_model = new StoreLeisure();                $map = [                    'status' => 1                ];                switch ($d_type) {                    case 1:                        $map['date_e'] = date("Y-m-d", $ymd);                        break;                    case 2:                        $map['date_e_year_week'] = date("Y", $ymd) . "-" . (intval(date("W", $ymd)) - 1);                        break;                    case 3:                        $map['date_e_month'] = date("Y-m", $ymd);                        break;                }                $return_data_temp = $store_model->where($map)->field('store_id,store_name,sum(hour) count')->group('store_id')->select();                $return_data_temp = json_encode($return_data_temp);                $return_data_temp = json_decode($return_data_temp, true);                $return_data_temp = two_sort($return_data_temp, 'count', SORT_DESC);                $data_log = [                    'statistics_data' => $return_data_temp,                ];                $statistics_model = new Statistics();//            * data_log 统计的数据//            * year 统计年//            * month 统计年-月//            * week 统计年-月-周//            * day 统计年-月-日//            * hour 统计小时//            * type 统计类型 1订单运营情况 2取车情况 3还车情况 4空站情况//            * d_type 统计类型 1日统计 2周统计 3月统计 4年统计//            * store_key_id 数据归属                $in_data = [                    'data_log' => $data_log,                    'year' => date("Y", $ymd),                    'month' => date("Y-m", $ymd),                    'week' => date("Y-W", $ymd),                    'day' => date("Y-m-d", $ymd),                    'type' => $type,                    'd_type' => $d_type,                    'store_key_id' => 153                ];                $return_data = $statistics_model->addStatistics($in_data);                return $return_data;                break;        }    }    /**--------------------统计数据采集处理结束-----------------------*/}